@using Umbraco.Cms.Core.PropertyEditors.ValueConverters
@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;

@{
    var centerContentClass = (Model.Content.Value<bool>("centerContent")) ? "center-container" : "";
    var topContentClass = (Model.Content.Value<bool>("topContent")) ? "top-container" : "";
    var bottomContentClass = (Model.Content.Value<bool>("bottomContent")) ? "bottom-container" : "";

    //positioning
    var absolutePosition = Model.Content.Value<bool>("absolutePosition") ? "absolute-position" : "";
    var relativePostion = absolutePosition == "absolute-position" ? "relative-position" : "";
    var rightPositioning = Model.Content.Value<int>("rightPositioning").ToString() + "%";
    var topPositioning = Model.Content.Value<int>("topPositioning").ToString();

    //BG color
    var backgroundColorLabel = Model?.Content?.Value<ColorPickerValueConverter.PickedColor>("backgroundColor")?.Label.ToLower() ?? null;
    var backgroundColorClass = (!string.IsNullOrEmpty(backgroundColorLabel) && backgroundColorLabel != "none") ? $"bg-{backgroundColorLabel}" : "";
}

@if (absolutePosition == "absolute-position")
{
    <div class="@relativePostion"
         style="
        display:flex;
        align-items:center;
        justify-content: center;">
        <div class="container @centerContentClass @topContentClass @bottomContentClass @absolutePosition @backgroundColorClass"
             style="
            top: @topPositioning;">

            @await Html.GetBlockGridItemAreasHtmlAsync(Model)
        </div>
    </div>
}
else
{
    <div class="container @centerContentClass @topContentClass @bottomContentClass @backgroundColorClass">
        @await Html.GetBlockGridItemAreasHtmlAsync(Model)
    </div>
}