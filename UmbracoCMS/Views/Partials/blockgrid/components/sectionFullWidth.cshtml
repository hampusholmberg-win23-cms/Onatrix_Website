@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Cms.Core.PropertyEditors.ValueConverters;

@{
    //Section meta data
    var sectionTitle = Model?.Content.Value<string>("sectionTitle") ?? "";
    var sectionId = sectionTitle.ToString().ToLower().Trim().Replace(" ", "-"); 

    //Section backgrounds
    var sectionBackgroundColorLabel = Model?.Content?.Value<ColorPickerValueConverter.PickedColor>("sectionBackgroundColor")?.Label.ToLower() ?? null;
    var sectionBackgroundColorClass = (!string.IsNullOrEmpty(sectionBackgroundColorLabel) && sectionBackgroundColorLabel != "none") ? $"bg-{sectionBackgroundColorLabel}" : "";
    var sectionBackgroundImage = Model?.Content.Value<IPublishedContent>("sectionBackgroundImage")?.Url() ?? null;

    //formatting
    var sectionBackgroundImageMaxWidth = Model?.Content?.Value<string>("sectionBackgroundImageMaxWidth") ?? "100%";
    var minimumHeightValue = Model?.Content?.Value<int>("minumumHeight").ToString() ?? "0";
    var minimumHeight = minimumHeightValue + "px";

    //positioning
    var centerContentClass = (Model.Content.Value<bool>("centerContentOnPage")) ? "center" : "";

    var spacingTopValue = Model.Content.Value<int>("addSpaceToTop");
    var spacingTopClass = spacingTopValue.ToString() + "rem";

    var spacingBottomValue = Model.Content.Value<int>("addSpaceToBottom");
    var spacingBottomClass = spacingBottomValue.ToString() + "rem";

    var spacingRightValue = Model.Content.Value<int>("addSpaceToRight");
    var spacingRightClass = spacingRightValue.ToString() + "rem";

    var spacingLeftValue = Model.Content.Value<int>("addSpaceToLeft");
    var spacingLeftClass = spacingLeftValue.ToString() + "rem";
}

@if (sectionBackgroundImage != null)
{
    <section 
        id="@sectionId"
             class="  @centerContentClass @sectionBackgroundColorClass"
             style="
                padding-right: @spacingRightClass; 
                padding-left: @spacingLeftClass;
                margin-top: @spacingTopClass;
                margin-bottom: @spacingBottomClass;">

        @* <div class="background-div @spacingTopClass @spacingBottomClass" style="max-width=@sectionBackgroundImageMaxWidth; background-image:url(@sectionBackgroundImage); background-size: cover; background-position: 60%;"> *@
        <div 
            class="background-div " 
            style="
                    max-width: @sectionBackgroundImageMaxWidth; 
                    min-height: @minimumHeight;
                    background-image:url(@sectionBackgroundImage); 
                    background-size: cover; 
                    background-position: 60%;">

            @await Html.GetBlockGridItemAreasHtmlAsync(Model)
        </div>
    </section>
}

else
{
    <section id="@sectionId"
             class="  @centerContentClass @sectionBackgroundColorClass"
             style="
                padding-right: @spacingRightClass;
                padding-left: @spacingLeftClass;
                margin-top: @spacingTopClass;
                margin-bottom: @spacingBottomClass;">

        @await Html.GetBlockGridItemAreasHtmlAsync(Model)

    </section>
}