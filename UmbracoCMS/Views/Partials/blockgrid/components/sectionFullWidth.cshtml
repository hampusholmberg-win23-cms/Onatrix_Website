@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Cms.Core.PropertyEditors.ValueConverters;

@{
    //Section meta data
    var sectionTitle = Model?.Content.Value<string>("sectionTitle") ?? "";
    var sectionId = sectionTitle.ToString().ToLower().Trim().Replace(" ", "-"); 

    if (sectionTitle == "Great Reviews Section")
    {
        Console.WriteLine();
    }

    //Section backgrounds
    var sectionBackgroundColorLabel = Model?.Content?.Value<ColorPickerValueConverter.PickedColor>("sectionBackgroundColor")?.Label.ToLower() ?? null;
    var sectionBackgroundColorClass = (!string.IsNullOrEmpty(sectionBackgroundColorLabel) && sectionBackgroundColorLabel != "none") ? $"bg-{sectionBackgroundColorLabel}" : "";
    var sectionBackgroundImage = Model?.Content.Value<IPublishedContent>("sectionBackgroundImage")?.Url() ?? null;
    
    // Section backgrounds positioning when shrinking media
    var sectionBackgroundImageHorizontalPosition = Model?.Content.Value<int>("sectionBackgroundImageHorizontalPosition") is int hPos && hPos != -1
        ? $"{hPos}%"
        : "50%";

    var sectionBackgroundImageVerticalPosition = Model?.Content.Value<int>("sectionBackgroundImageVerticalPosition") is int vPos && vPos != -1
        ? $"{vPos}%"
        : "50%";

    //formatting
    var sectionBackgroundImageMaxWidthValue = Model?.Content.Value<int>("sectionBackgroundImageMaxWidth");
    var sectionBackgroundImageMaxWidth = "100%";

    if (sectionBackgroundImageMaxWidthValue != 0)
        sectionBackgroundImageMaxWidth = sectionBackgroundImageMaxWidthValue.ToString() + "px";

    var minimumHeightValue = Model?.Content?.Value<int>("minumumHeight").ToString() ?? "0";
    var minimumHeight = minimumHeightValue + "px";

    //positioning
    var centerContentClass = (Model.Content.Value<bool>("centerContentOnPage")) ? "center" : "";

    var spacingTopValue = Model.Content.Value<int>("addSpaceToTop");
    var spacingTopClass = spacingTopValue.ToString() + "rem";

    var spacingBottomValue = Model.Content.Value<int>("addSpaceToBottom");
    var spacingBottomClass = spacingBottomValue.ToString() + "rem";

    var spacingRightValue = Model.Content.Value<int>("addSpaceToRight");
    var spacingRightClass = spacingRightValue.ToString() + "rem";

    var spacingLeftValue = Model.Content.Value<int>("addSpaceToLeft");
    var spacingLeftClass = spacingLeftValue.ToString() + "rem";

    //Responsive variables
    var hideInDesktopView = Model!.Content.Value<bool>("hideInDesktopView") ? "hidden-desktop" : "";
    var hideInTabletView = Model!.Content.Value<bool>("hideInTabletView") ? "hidden-tablet" : "";
    var hideInMobileView = Model.Content.Value<bool>("hideInMobileView") ? "hidden-mobile" : "";
}


<section 
    id="@sectionId"
         class="  @centerContentClass @sectionBackgroundColorClass @hideInTabletView @hideInMobileView @hideInDesktopView"
            style="
            padding-right: @spacingRightClass; 
            padding-left: @spacingLeftClass;
            padding-top: @spacingTopClass;
            padding-bottom: @spacingBottomClass;
            min-height: @minimumHeight;">

    @if (sectionBackgroundImage != null)
    {
    <div 
        class="background-div "
            style="                
                background-image:url(@sectionBackgroundImage);
                max-width: @sectionBackgroundImageMaxWidth; 
                min-height: @minimumHeight;
                background-repeat: no-repeat;
                background-position: @sectionBackgroundImageHorizontalPosition @sectionBackgroundImageVerticalPosition;">

        @await Html.GetBlockGridItemAreasHtmlAsync(Model)

    </div>
    }
    else
    {
        @await Html.GetBlockGridItemAreasHtmlAsync(Model)
    }

</section>