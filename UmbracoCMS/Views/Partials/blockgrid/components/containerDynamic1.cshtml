@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;

@{
    //Background Image
    var backgroundImage = Model?.Content.Value<IPublishedContent>("backgroundImage")?.Url() ?? null;

    var backgroundImageHorizontalPosition = Model?.Content.Value<int>("backgroundImageHorizontalPosition") is int hPos && hPos != -1
        ? $"{hPos}%"
        : "50%";

    var backgroundImageVerticalPosition = Model?.Content.Value<int>("backgroundImageVerticalPosition") is int vPos && vPos != -1
        ? $"{vPos}%"
        : "50%";

    //Flexing
    var center = Model.Content.Value<bool>("centerContentOnPage") ? "center" : "";
    var alignment = Model.Content.Value<string>("alignment")?.ToString();

    //Spacing 
    var spacingTopClass = $"{Model.Content.Value<int>("addSpaceToTop")}rem";
    var spacingBottomClass = $"{Model.Content.Value<int>("addSpaceToBottom")}rem";
    var spacingRightClass = $"{Model.Content.Value<int>("addSpaceToRight")}rem";
    var spacingLeftClass = $"{Model.Content.Value<int>("addSpaceToLeft")}rem";

    //Formatting
    var maxWidth = Model.Content.Value<int>("maxWidth") is var maxWidthValue && maxWidthValue > 0 ? $"{maxWidthValue}px" : "";
    var takeUpAllAvailableSpace = Model.Content.Value<bool>("takeUpAllAvailableSpace") ? "full-height-width" : "";

    //Borders
    var border = Model?.Content.Value<string>("border") ?? "";

    border = !string.IsNullOrEmpty(border) && !string.Equals(border, "None")
        ? border switch
        {
            "Full" => "border-full",
            "Top" => "border-top",
            "Bottom" => "border-bottom",
            "Right" => "border-right",
            "Left" => "border-left",
            _ => ""
        }
        : "";

    //Responsive variables
    var hideInDesktopView = Model.Content.Value<bool>("hideInDesktopView") ? "hidden-desktop" : "";
    var hideInTabletView = Model.Content.Value<bool>("hideInTabletView") ? "hidden-tablet" : "";
    var hideInMobileView = Model.Content.Value<bool>("hideInMobileView") ? "hidden-mobile" : "";
}

@if (backgroundImage != null)
{
    <div class="@alignment @center @hideInTabletView @hideInMobileView @hideInDesktopView @border @takeUpAllAvailableSpace"
         style="
            padding-right: @spacingRightClass;
            padding-left: @spacingLeftClass;
            padding-top: @spacingTopClass;
            padding-bottom: @spacingBottomClass;
            max-width: @maxWidth;
            background-image:url(@backgroundImage);
            background-repeat: no-repeat;
            background-position: @backgroundImageHorizontalPosition @backgroundImageVerticalPosition;
        ">

        @await Html.GetBlockGridItemAreasHtmlAsync(Model)
    </div>
}
else
{
    <div class="@alignment @center @hideInTabletView @hideInMobileView @hideInDesktopView @border @takeUpAllAvailableSpace"
         style="
            padding-right: @spacingRightClass;
            padding-left: @spacingLeftClass;
            padding-top: @spacingTopClass;
            padding-bottom: @spacingBottomClass;
            max-width: @maxWidth;
    ">

        @await Html.GetBlockGridItemAreasHtmlAsync(Model)
    </div>
}